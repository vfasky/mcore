// Generated by CoffeeScript 1.10.0

/**
 * 封装 http 请求
 * @date 2015-12-07 14:32:01
 * @author vfasky <vfasky@gmail.com>
 * @link http://vfasky.com
 * @version $Id$
 */
"use strict";
var $, errCallback, http, networkErrCallback;

$ = require('jquery');

networkErrCallback = function(xhr, status, hideError) {
  var error, error1, httpCode, msg, res;
  msg = 'Network Error';
  if (xhr.responseText) {
    try {
      res = JSON.parse(xhr.responseText);
      if (res.error) {
        msg = res.error;
      }
    } catch (error1) {
      error = error1;
    }
  }
  httpCode = xhr.statusCode().status;
  if (httpCode) {
    msg = msg + ' ( code: ' + httpCode + ' )';
  }
  if (!hideError) {
    return alert(msg);
  } else {
    return console.log(msg);
  }
};

errCallback = function(res, hideError) {
  var msg;
  msg = res.error || res.msg || 'An unknown error occurred';
  if (!hideError) {
    return alert(msg);
  } else {
    return console.log(msg);
  }
};

http = (function() {
  var ajax, exports, timeout;
  timeout = 10000;
  ajax = function(type, url, data, hideError) {
    var dtd, options, promise, xhr;
    if (hideError == null) {
      hideError = false;
    }
    dtd = $.Deferred();
    options = {
      cache: false,
      data: http.sendDataFormat(data || {}),
      dataType: 'json',
      type: type || 'GET',
      timeout: timeout,
      headers: http.buildHeaders()
    };
    if (type === 'jsonp') {
      options.type = 'GET';
      options.dataType = 'jsonp';
    }
    xhr = $.ajax(url, options);
    xhr.then(function(res) {
      if (http.isSuccess(res, this)) {
        return dtd.resolve(http.responseFormat(res));
      } else {
        dtd.reject(res);
        return errCallback(res, hideError);
      }
    }).fail(function(xhr, status) {
      var e, error1, res;
      dtd.reject(xhr, status);
      if (!xhr.statusCode().status) {
        return networkErrCallback(xhr, status, hideError);
      } else {
        try {
          res = $.parseJSON(xhr.responseText);
        } catch (error1) {
          e = error1;
          res = {};
        }
        return errCallback(res, hideError);
      }
    });
    promise = dtd.promise();
    promise.xhr = xhr;
    promise.reject = function(err) {
      dtd = $.Deferred();
      dtd.reject(err);
      return dtd.promise();
    };
    return promise;
  };
  return exports = {
    get: function(url, data, hideError) {
      if (hideError == null) {
        hideError = false;
      }
      return ajax('GET', url, data, hideError);
    },
    post: function(url, data, hideError) {
      if (hideError == null) {
        hideError = false;
      }
      return ajax('POST', url, data, hideError);
    },
    jsonp: function(url, data, hideError) {
      if (hideError == null) {
        hideError = false;
      }
      return ajax('jsonp', url, data, hideError);
    }
  };
})();

http.isSuccess = function(res) {
  return Number(res.code) === 1;
};

http.buildHeaders = function() {
  return {};
};

http.regErrCallback = function(type, fun) {
  if (type === 'network') {
    return networkErrCallback = fun;
  } else {
    return errCallback = fun;
  }
};

http.responseFormat = function(res) {
  return res;
};

http.sendDataFormat = function(data) {
  return data;
};

module.exports = http;
